version: '3.12'

services:
  nginx:
    container_name: booking_nginx
    build:
      context: .
      dockerfile: "Dockerfile.nginx"
    ports:
      - 80:80 # http
      - 443:443 # https
    links:
      - booking
      - flower

  db:
    image: postgres:15
    container_name: booking_db
    volumes:
      - postgresdata:/var/lib/postgresql/data
    env_file:
      - .env-docker
    ports:
      - 5432:5432

  redis:
    image: redis:7
    container_name: booking_redis

  booking:
    container_name: booking_app
    build:
      context: .
    env_file:
      - .env-docker
    depends_on:
      - db
      - redis
    command: sh -c "alembic upgrade head
        && gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
#    ports:
#      - 8001:8000

  celery:
    build:
      context: .
    container_name: booking_celery
    command: sh -c "celery -A app.tasks.celery_app:celery_app worker --loglevel=INFO"
    env_file:
      - .env-docker
    depends_on:
      - redis

  celery_beat:
    build:
      context: .
    container_name: booking_celery_beat
    command: sh -c "celery --app=app.tasks.celery_app:celery_app worker -l INFO -B"
    env_file:
      - .env-docker
    depends_on:
      - redis

  flower:
    build:
      context: .
    container_name: booking_flower
    # command to run flower with nginx
    command: sh -c "celery -A app.tasks.celery_app:celery_app flower --url_prefix=/flower"
#    command: sh -c "celery -A app.tasks.celery_app:celery_app flower"
    env_file:
      - .env-docker
    depends_on:
      - redis
#    ports:
#      - 5555:5555

  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
     - ./prometheus.yml:/etc/prometheus/prometheus.yml
     - prometheusdata:/prometheus
    restart: unless-stopped
    ports:
     - 9090:9090

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    volumes:
     - grafanadata:/var/lib/grafana
    restart: unless-stopped
    ports:
     - 3000:3000

volumes:
  postgresdata:
  grafanadata:
  prometheusdata: